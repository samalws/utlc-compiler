fn main() {
  let mut a = Rc::new(Monotype::Cmain_0);
  loop {
    let t = dePT(veval(a, Rc::new(Monotype::PComma_0)));
    let otp = monoToStr(t.0);
    if otp == "q" {
      break;
    }
    println!("{}", otp.substring(1,otp.len()));
    let mut inp = String::new();
    std::io::stdin().read_line(&mut inp).unwrap();
    a = veval(t.1, strToMono(inp.substring(0,inp.len()-1).to_string()));
  }
}

fn strToMono(s: String) -> Rc<Monotype> {
  let mut retVal = Rc::new(Monotype::PNull_0);
  let mut tmpVec = Vec::new();
  for c in s.bytes() {
    tmpVec.push(c);
  }
  tmpVec.reverse();
  for c in tmpVec {
    retVal = Rc::new(Monotype::PCons_2(BigInt::from(c), retVal));
  }
  retVal
}
fn monoToStr(a: Rc<Monotype>) -> String {
  let b = veval(veval(veval(veval(veval(veval(a, Rc::new(Monotype::PI_0(BigInt::from(0)))), Rc::new(Monotype::PSucc_0)), Rc::new(Monotype::PAdd_0)), Rc::new(Monotype::PMul_0)), Rc::new(Monotype::PNull_0)), Rc::new(Monotype::PCons_0));
  let asList = dePL(b);
  let mut utf8List = Vec::new();
  for c in asList {
    utf8List.push(c.to_bytes_be().1[0]);
  }
  String::from_utf8(utf8List).unwrap()
}
