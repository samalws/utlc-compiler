soonest todos:
-small bug: x -> x -> x gets translated to f vx vx = vx, which makes haskell (and rust) bug out
-fix import

rust todos:
-make custom thunk class

optimizations:
-do eval calls if it just turns Cx_n into Cx_n+1
-remove unused function arguments (since functions are only called in eval)
-merge functions that're literally identical
-track what types a function takes and returns, and make smaller versions of Monotype depending on this
-see paper notes for more of these

import fixes:
-if its qualified then all its variables get messed up
-if you import A and A imports B then you get everything in B
-if you qualify ">" with "-" you get a function called "->"
-relative paths
-private functions lol

compiler:
-more compilation stuff like compiling to an imperative lang instead of haskell
-something like _= for private functions
-special P``string goes here`` syntax for parsing string with spaces allowed in it using parser pP (& checking for errors)
--make this be the only way to input strings, getting rid of/replacing the double quote syntax?
-parse using stuff in parens by doing (bla bla)`parsedString
-infix using stuff in parens by doing x `(bla bla) y
-make fresh variable generation not be O(num vars you want to generate^2) lol

utlc code:
-more parsers: printf type thing (variadic); chars with cool backslash stuff; strings with cool backslash stuff; numbers with diff base systems; stacks of car and cdr?; *arbitrary ADT types*
-generally make a better naming convention
-arbitrary m by n function composition
-ADTs, auto deriving folds (convert to church encoding); fmap; equality; parsing; printing; maybe ord; maybe monoid; etc
-n-tuples (ie fixed size arrays) with associated operations
-self interpreter (ie convert string to code)
-nRev, nConst, nIgnore
-something like a "function matrix" to compose for multi-input multi-output functions
