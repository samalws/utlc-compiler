id = x -> x;
const = x -> y -> x;
ignore = x -> y -> y;

true = const;
false = ignore;

tup = x -> y -> f -> f x y;
fst = t -> t const;
snd = t -> t ignore;

zero = f -> x -> x;
succ = n -> f -> x -> f `n f x;
one = succ zero;
add = n -> m -> succ `n m;
mul = n -> m -> add m `n zero;
exp = n -> m -> mul m `n one;

dec = n -> fst `id n decFun decBase;
decFun = t -> snd t `tup succ (snd t);
decBase = tup zero zero;

isZero = n -> const false `n true;

factorial = n -> (isZero n) one (n `mul factorial `id dec n);

five = succ `id succ `id succ `id succ `id succ zero;
ten = add five five;

main = factorial ten;
